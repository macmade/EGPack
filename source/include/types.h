/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @header      types.h
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    Program's type definitions
 */

#ifndef _EGPACK_TYPES_H_
#define _EGPACK_TYPES_H_
#pragma once

#ifdef __cplusplus
extern "C" {
#endif
    
    /* System includes */
    #include <stdc/bool.h>
    #include <stdint.h>
    #include <openssl/md5.h>
    
    /*!
     * @typedef     egpack_cli_args
     * @abstract    Command line arguments
     * @field       archive     Whether to archive the source file
     * @field       unarchive   Whether to un-archive the source file
     * @field       version     Whether to display the program's version number
     * @filed       help        Whether to display the help dialog
     * @field       debug       Whether to enable the debug mode
     * @field       source      Source file to archive or un-archive
     */
    typedef struct _egpack_cli_args
    {
        bool   archive;
        bool   unarchive;
        bool   version;
        bool   help;
        bool   debug;
        char * source;
    }
    egpack_cli_args;
    
    /*!
     * @typedef     egpack_header
     * @abstract    EGPK file header
     * @field       id      File signature
     * @field       ctime   Archive creation time
     * @field       pad     Reserved bits
     */
    typedef struct _egpack_header
    {
        uint8_t  id[ 4 ];
        uint32_t ctime;
        uint8_t  pad[ 64 ];
    }
    egpack_header;
    
    /*!
     * @typedef     egpack_header_entry
     * @abstract    EGPK entry header
     * @field       type    Type of the entry (egpack_entry_type)
     * @field       depth   Depth from the archive's root directory
     * @field       pad     Reserved bits
     */
    typedef struct _egpack_header_entry
    {
        uint8_t  type;
        uint32_t depth;
        uint8_t  pad[ 64 ];
    }
    egpack_header_entry;
    
    /*!
     * @typedef     egpack_entry_type
     * @abstract    EGPK entry type
     * @constant    EGPACK_ENTRY_TYPE_FILE      Regular file
     * @constant    EGPACK_ENTRY_TYPE_DIR       Directory
     * @constant    EGPACK_ENTRY_TYPE_SYMLINK   Symbolic link
     */
    typedef enum
    {
        EGPACK_ENTRY_TYPE_FILE      = 0x00,
        EGPACK_ENTRY_TYPE_DIR       = 0x01,
        EGPACK_ENTRY_TYPE_SYMLINK   = 0x02
    }
    egpack_entry_type;
    
    /*!
     * @typedef     egpack_header_entry_file
     * @abstract    EGPK file entry header
     * @field       name    File name
     * @field       size    File size in bytes
     * @field       ctime   Creation time
     * @field       mtime   Last modification time
     * @field       atime   Last access time
     * @field       mode    File mode
     * @field       uid     User ID
     * @field       gif     Group ID
     * @field       md5     File MD5 checksum
     * @field       pad     Reserved bits
     */
    typedef struct _egpack_header_entry_file
    {
        uint8_t   name[ EGPK_FILENAME_MAX ];
        uint64_t  size;
        uint32_t  ctime;
        uint32_t  mtime;
        uint32_t  atime;
        uint32_t  mode;
        uint32_t  uid;
        uint32_t  gid;
        uint8_t   md5[ 32 ];
        uint8_t   pad[ 64 ];
    }
    egpack_header_entry_file;
    
    /*!
     * @typedef     egpack_header_entry_dir
     * @abstract    EGPK directory entry header
     * @field       name    Directory name
     * @field       ctime   Creation time
     * @field       mtime   Last modification time
     * @field       atime   Last access time
     * @field       mode    Directory mode
     * @field       uid     User ID
     * @field       gif     Group ID
     * @field       pad     Reserved bits
     */
    typedef struct _egpack_header_entry_dir
    {
        uint8_t   name[ EGPK_FILENAME_MAX ];
        uint32_t  ctime;
        uint32_t  mtime;
        uint32_t  atime;
        uint32_t  mode;
        uint32_t  uid;
        uint32_t  gid;
        uint8_t   pad[ 64 ];
    }
    egpack_header_entry_dir;
    
    /*!
     * @typedef     egpack_header_entry_file
     * @abstract    EGPK symbolic link entry header
     * @field       name    File name
     * @field       target  Symbolic link target
     * @field       size    File size in bytes
     * @field       ctime   Creation time
     * @field       mtime   Last modification time
     * @field       atime   Last access time
     * @field       mode    File mode
     * @field       uid     User ID
     * @field       gif     Group ID
     * @field       pad     Reserved bits
     */
    typedef struct _egpack_header_entry_symlink
    {
        uint8_t   name[ EGPK_FILENAME_MAX ];
        uint8_t   target[ EGPK_SYMLINK_TARGET_MAX ];
        uint32_t  ctime;
        uint32_t  mtime;
        uint32_t  atime;
        uint32_t  mode;
        uint32_t  uid;
        uint32_t  gid;
        uint8_t   pad[ 64 ];
    }
    egpack_header_entry_symlink;
    
    /*!
     * @typedef     egpack_status
     * @abstract    EGPK status codes
     * constant     EGPACK_OK                       No error
     * constant     EGPACK_ERROR_STAT               Error with the stat() function
     * constant     EGPACK_ERROR_INVALID_FILE       Invalid EGPK file
     * constant     EGPACK_ERROR_OPENDIR            Error with the opendir() function
     * constant     EGPACK_ERROR_MALLOC             Error with the memory allocation functions
     * constant     EGPACK_ERROR_FOPEN              Error with the fopen() function
     * constant     EGPACK_ERROR_FILE_ID            Invalid file signature
     * constant     EGPACK_ERROR_MD5                Invalid MD5 checksum
     * constant     EGPACK_ERROR_INVALID_ENTRY      Invalid file entry
     * constant     EGPACK_ERROR_MKDIR              Error with the mkdir() function
     * constant     EGPACK_ERROR_CHMOD              Error with the chmod() function
     * constant     EGPACK_ERROR_READLINK           Error with the readlink() function
     * constant     EGPACK_ERROR_SYMLINK            Error with the symlink() function
     */
    typedef enum
    {
        EGPACK_OK                   = 0x00,
        EGPACK_ERROR_STAT           = 0x01,
        EGPACK_ERROR_INVALID_FILE   = 0x02,
        EGPACK_ERROR_OPENDIR        = 0x03,
        EGPACK_ERROR_MALLOC         = 0x04,
        EGPACK_ERROR_FOPEN          = 0x05,
        EGPACK_ERROR_FILE_ID        = 0x06,
        EGPACK_ERROR_MD5            = 0x07,
        EGPACK_ERROR_INVALID_ENTRY  = 0x08,
        EGPACK_ERROR_MKDIR          = 0x09,
        EGPACK_ERROR_CHMOD          = 0x0A,
        EGPACK_ERROR_READLINK       = 0x0B,
        EGPACK_ERROR_SYMLINK        = 0x0C
    }
    egpack_status;
    
#ifdef __cplusplus
}
#endif

#endif /* _EGPACK_TYPES_H_ */

